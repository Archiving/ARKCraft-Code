// Date: 26/07/2015 7:14:59 PM
// Template version 1.1
// Java generated by Techne
// Keep in mind that you still need to fill in some blanks
// - ZeuX

package com.arkcraft.mod.core.entity.model;

import net.minecraft.client.model.ModelBase;
import net.minecraft.client.model.ModelRenderer;
import net.minecraft.client.renderer.GlStateManager;
import net.minecraft.entity.Entity;
import net.minecraft.util.MathHelper;

/***
 * 
 * @author wildbill22
 *
 */
public class ModelDodo extends ModelBase {

	//fields
    ModelRenderer Head1;
    ModelRenderer Head2;
    ModelRenderer RightEyelid;
    ModelRenderer LeftEyelid;
    ModelRenderer TopBeak1;
    ModelRenderer TopBeak2;
    ModelRenderer BotBeak1;
    ModelRenderer BotBeak2;
    
    ModelRenderer UpperBoddy1;
    ModelRenderer LowerBoddy;
    ModelRenderer UpperBoddy2;
    ModelRenderer Neck;
    ModelRenderer Tail1;
    ModelRenderer Tail2;
    ModelRenderer LeftThigh;
    ModelRenderer RightThigh;    
    
    ModelRenderer LeftWing;
    ModelRenderer RightWing;
    
    ModelRenderer LeftLeg;
    ModelRenderer LeftFoot1;
    ModelRenderer LeftFoot2;
    ModelRenderer LeftFoot3;
    ModelRenderer LeftClaw1;
    ModelRenderer LeftClaw2;
    ModelRenderer LeftClaw3;

    ModelRenderer RightLeg;
    ModelRenderer RightFoot1;
    ModelRenderer RightFoot2;
    ModelRenderer RightFoot3;
    ModelRenderer RightClaw1;
    ModelRenderer RightClaw2;
    ModelRenderer RightClaw3;

	public ModelDodo() {
	    textureWidth = 128;
	    textureHeight = 128;
	    
	    // Head parts
	      Head1 = new ModelRenderer(this, 12, 24);
	      Head1.addBox(-1.7F, -3.2F, -0.5F, 3, 5, 4);
	      Head1.setRotationPoint(0F, 12.8F, 0F);
	      Head1.setTextureSize(128, 128);
	      Head1.mirror = true;
	      setRotation(Head1, 0F, 0F, 0F);
	      Head2 = new ModelRenderer(this, 12, 24);
	      Head2.addBox(-1.3F, -3.2F, -0.5F, 3, 5, 4);
	      Head2.setRotationPoint(0F, 12.8F, 0F);
	      Head2.setTextureSize(128, 128);
	      Head2.mirror = true;
	      setRotation(Head2, 0F, 0F, 0F);
	      RightEyelid = new ModelRenderer(this, 0, 21);
	      RightEyelid.addBox(-2F, -1.4F, 0.5F, 1, 1, 1);
	      RightEyelid.setRotationPoint(0F, 12.8F, 0F);
	      RightEyelid.setTextureSize(128, 128);
	      RightEyelid.mirror = true;
	      setRotation(RightEyelid, 0F, 0F, 0.2792527F);
	      LeftEyelid = new ModelRenderer(this, 0, 21);
	      LeftEyelid.addBox(1F, -1.4F, 0.5F, 1, 1, 1);
	      LeftEyelid.setRotationPoint(0F, 12.8F, 0F);
	      LeftEyelid.setTextureSize(128, 128);
	      LeftEyelid.mirror = true;
	      setRotation(LeftEyelid, 0F, 0F, -0.2792527F);
	      TopBeak1 = new ModelRenderer(this, 0, 0);
	      TopBeak1.addBox(-1F, -2F, -5F, 2, 2, 5);
	      TopBeak1.setRotationPoint(0F, 12.8F, 0F);
	      TopBeak1.setTextureSize(128, 128);
	      TopBeak1.mirror = true;
	      setRotation(TopBeak1, 0F, 0F, 0F);
	      TopBeak2 = new ModelRenderer(this, 0, 7);
	      TopBeak2.addBox(-1F, -0.4F, -5F, 2, 1, 2);
	      TopBeak2.setRotationPoint(0F, 12.8F, 0F);
	      TopBeak2.setTextureSize(128, 128);
	      TopBeak2.mirror = true;
	      setRotation(TopBeak2, 0F, 0F, 0F);
	      BotBeak1 = new ModelRenderer(this, 0, 10);
	      BotBeak1.addBox(-0.7F, -0.5F, -4F, 1, 1, 4);
	      BotBeak1.setRotationPoint(0F, 12.8F, 0F);
	      BotBeak1.setTextureSize(128, 128);
	      BotBeak1.mirror = true;
	      setRotation(BotBeak1, 0F, 0F, 0F);
	      BotBeak2 = new ModelRenderer(this, 0, 10);
	      BotBeak2.addBox(-0.3F, -0.5F, -4F, 1, 1, 4);
	      BotBeak2.setRotationPoint(0F, 12.8F, 0F);
	      BotBeak2.setTextureSize(128, 128);
	      BotBeak2.mirror = true;
	      setRotation(BotBeak2, 0F, 0F, 0F);
	      convertToChild(Head1, BotBeak2);
	      convertToChild(Head1, BotBeak1);
	      convertToChild(Head1, TopBeak2);
	      convertToChild(Head1, TopBeak1);
	      convertToChild(Head1, LeftEyelid);
	      convertToChild(Head1, RightEyelid);
	      convertToChild(Head1, Head2);
	      
	      // Parts of the body
	      UpperBoddy1 = new ModelRenderer(this, 0, 33);
	      UpperBoddy1.addBox(-2.2F, -1.5F, -0.5F, 4, 5, 5);
	      UpperBoddy1.setRotationPoint(0F, 17.8F, 0.5F);
	      UpperBoddy1.setTextureSize(128, 128);
	      UpperBoddy1.mirror = true;
	      setRotation(UpperBoddy1, 0.1745329F, 0F, 0F);
	      LowerBoddy = new ModelRenderer(this, 0, 43);
	      LowerBoddy.addBox(-2F, -2.1F, 4F, 4, 4, 3);
	      LowerBoddy.setRotationPoint(0F, 17.8F, 0.5F);
	      LowerBoddy.setTextureSize(128, 128);
	      LowerBoddy.mirror = true;
	      setRotation(LowerBoddy, 0F, 0F, 0F);
	      UpperBoddy2 = new ModelRenderer(this, 0, 33);
	      UpperBoddy2.addBox(-1.8F, -1.5F, -0.5F, 4, 5, 5);
	      UpperBoddy2.setRotationPoint(0F, 17.8F, 0.5F);
	      UpperBoddy2.setTextureSize(128, 128);
	      UpperBoddy2.mirror = true;
	      setRotation(UpperBoddy2, 0.1745329F, 0F, 0F);
	      Neck = new ModelRenderer(this, 0, 23);
	      Neck.addBox(-1.5F, -4.5F, -1.5F, 3, 7, 3);
	      Neck.setRotationPoint(0F, 17.8F, 1F);
	      Neck.setTextureSize(128, 128);
	      Neck.mirror = true;
	      setRotation(Neck, -0.1396263F, 0F, 0F);
	      Tail1 = new ModelRenderer(this, 0, 50);
	      Tail1.addBox(-1.7F, -3.1F, 6F, 3, 2, 3);
	      Tail1.setRotationPoint(0F, 17.8F, 0.5F);
	      Tail1.setTextureSize(128, 128);
	      Tail1.mirror = true;
	      setRotation(Tail1, -0.1745329F, 0F, 0F);
	      Tail2 = new ModelRenderer(this, 0, 50);
	      Tail2.addBox(-1.3F, -3.1F, 6F, 3, 2, 3);
	      Tail2.setRotationPoint(0F, 17.8F, 0.5F);
	      Tail2.setTextureSize(128, 128);
	      Tail2.mirror = true;
	      setRotation(Tail2, -0.1745329F, 0F, 0F);
	      LeftThigh = new ModelRenderer(this, 18, 33);
	      LeftThigh.addBox(0.2F, 3.5F, 2.5F, 2, 1, 2);
	      LeftThigh.setRotationPoint(0F, 17.8F, 0.5F);
	      LeftThigh.setTextureSize(128, 128);
	      LeftThigh.mirror = true;
	      setRotation(LeftThigh, 0.1745329F, 0F, 0F);
	      RightThigh = new ModelRenderer(this, 18, 33);
	      RightThigh.addBox(-2.2F, 3.5F, 2.5F, 2, 1, 2);
	      RightThigh.setRotationPoint(0F, 17.8F, 0.5F);
	      RightThigh.setTextureSize(128, 128);
	      RightThigh.mirror = true;
	      setRotation(RightThigh, 0.1745329F, 0F, 0F);
	      convertToChild(UpperBoddy1, RightThigh);
	      convertToChild(UpperBoddy1, LeftThigh);
	      convertToChild(UpperBoddy1, Tail2);
	      convertToChild(UpperBoddy1, Tail1);
	      convertToChild(UpperBoddy1, Neck);
	      convertToChild(UpperBoddy1, UpperBoddy2);
	      convertToChild(UpperBoddy1, LowerBoddy);

	      // Left wing
	      LeftWing = new ModelRenderer(this, 0, 55);
	      LeftWing.addBox(0.7F, -0.5F, -1F, 1, 3, 4);
	      LeftWing.setRotationPoint(1.5F, 16.8F, 2F);
	      LeftWing.setTextureSize(128, 128);
	      LeftWing.mirror = true;
	      setRotation(LeftWing, 0F, 0F, 0F);

	      // Right wing
	      RightWing = new ModelRenderer(this, 0, 55);
	      RightWing.addBox(-1.7F, -0.5F, -1F, 1, 3, 4);
	      RightWing.setRotationPoint(-1.5F, 16.8F, 2F);
	      RightWing.setTextureSize(128, 128);
	      RightWing.mirror = true;
	      setRotation(RightWing, 0F, 0F, 0F);

	      // Left leg parts
	      LeftLeg = new ModelRenderer(this, 18, 36);
	      LeftLeg.addBox(-0.5F, 0F, 0F, 1, 3, 1);
	      LeftLeg.setRotationPoint(1.2F, 20.8F, 4.5F);
	      LeftLeg.setTextureSize(128, 128);
	      LeftLeg.mirror = true;
	      setRotation(LeftLeg, -0.2617994F, 0F, 0F);
	      LeftFoot1 = new ModelRenderer(this, 18, 40);
	      LeftFoot1.addBox(-0.5F, 2.2F, -2F, 1, 1, 2);
	      LeftFoot1.setRotationPoint(1.2F, 20.8F, 4.5F);
	      LeftFoot1.setTextureSize(128, 128);
	      LeftFoot1.mirror = true;
	      setRotation(LeftFoot1, 0F, 0.3490659F, 0F);
	      LeftFoot2 = new ModelRenderer(this, 18, 40);
	      LeftFoot2.addBox(-0.5F, 2.2F, -2F, 1, 1, 2);
	      LeftFoot2.setRotationPoint(1.2F, 20.8F, 4.5F);
	      LeftFoot2.setTextureSize(128, 128);
	      LeftFoot2.mirror = true;
	      setRotation(LeftFoot2, 0F, -0.3490659F, 0F);
	      LeftFoot3 = new ModelRenderer(this, 18, 43);
	      LeftFoot3.addBox(-0.5F, 2.2F, 0F, 1, 1, 1);
	      LeftFoot3.setRotationPoint(1.2F, 20.8F, 4.5F);
	      LeftFoot3.setTextureSize(128, 128);
	      LeftFoot3.mirror = true;
	      setRotation(LeftFoot3, 0F, 0F, 0F);
	      LeftClaw1 = new ModelRenderer(this, 18, 45);
	      LeftClaw1.addBox(0F, 2.2F, -2.5F, 0, 1, 1);
	      LeftClaw1.setRotationPoint(1.2F, 20.8F, 4.5F);
	      LeftClaw1.setTextureSize(128, 128);
	      LeftClaw1.mirror = true;
	      setRotation(LeftClaw1, 0F, 0.3490659F, 0F);
	      LeftClaw2 = new ModelRenderer(this, 18, 45);
	      LeftClaw2.addBox(0F, 2.2F, -2.5F, 0, 1, 1);
	      LeftClaw2.setRotationPoint(1.2F, 20.8F, 4.5F);
	      LeftClaw2.setTextureSize(128, 128);
	      LeftClaw2.mirror = true;
	      setRotation(LeftClaw2, 0F, -0.3490659F, 0F);
	      LeftClaw3 = new ModelRenderer(this, 18, 45);
	      LeftClaw3.addBox(0F, 2.2F, 0.5F, 0, 1, 1);
	      LeftClaw3.setRotationPoint(1.2F, 20.8F, 4.5F);
	      LeftClaw3.setTextureSize(128, 128);
	      LeftClaw3.mirror = true;
	      setRotation(LeftClaw3, 0F, 0F, 0F);

	      convertToChild(LeftLeg, LeftClaw3);
		  convertToChild(LeftLeg, LeftClaw2);
		  convertToChild(LeftLeg, LeftClaw1);
		  convertToChild(LeftLeg, LeftFoot3);
		  convertToChild(LeftLeg, LeftFoot2);
		  convertToChild(LeftLeg, LeftFoot1);
			
	      // Right leg parts
	      RightLeg = new ModelRenderer(this, 18, 36);
	      RightLeg.addBox(-0.5F, 0F, 0F, 1, 3, 1);
	      RightLeg.setRotationPoint(-1.2F, 20.8F, 4.5F);
	      RightLeg.setTextureSize(128, 128);
	      RightLeg.mirror = true;
	      setRotation(RightLeg, -0.2617994F, 0F, 0F);
	      RightFoot1 = new ModelRenderer(this, 18, 40);
	      RightFoot1.addBox(-0.5F, 2.2F, -2F, 1, 1, 2);
	      RightFoot1.setRotationPoint(-1.2F, 20.8F, 4.5F);
	      RightFoot1.setTextureSize(128, 128);
	      RightFoot1.mirror = true;
	      setRotation(RightFoot1, 0F, 0.3490659F, 0F);
	      RightFoot2 = new ModelRenderer(this, 18, 40);
	      RightFoot2.addBox(-0.5F, 2.2F, -2F, 1, 1, 2);
	      RightFoot2.setRotationPoint(-1.2F, 20.8F, 4.5F);
	      RightFoot2.setTextureSize(128, 128);
	      RightFoot2.mirror = true;
	      setRotation(RightFoot2, 0F, -0.3490659F, 0F);
	      RightFoot3 = new ModelRenderer(this, 18, 43);
	      RightFoot3.addBox(-0.5F, 2.2F, 0F, 1, 1, 1);
	      RightFoot3.setRotationPoint(-1.2F, 20.8F, 4.5F);
	      RightFoot3.setTextureSize(128, 128);
	      RightFoot3.mirror = true;
	      setRotation(RightFoot3, 0F, 0F, 0F);
	      RightClaw1 = new ModelRenderer(this, 18, 45);
	      RightClaw1.addBox(0F, 2.2F, -2.5F, 0, 1, 1);
	      RightClaw1.setRotationPoint(-1.2F, 20.8F, 4.5F);
	      RightClaw1.setTextureSize(128, 128);
	      RightClaw1.mirror = true;
	      setRotation(RightClaw1, 0F, 0.3490659F, 0F);
	      RightClaw2 = new ModelRenderer(this, 18, 45);
	      RightClaw2.addBox(0F, 2.2F, -2.5F, 0, 1, 1);
	      RightClaw2.setRotationPoint(-1.2F, 20.8F, 4.5F);
	      RightClaw2.setTextureSize(128, 128);
	      RightClaw2.mirror = true;
	      setRotation(RightClaw2, 0F, -0.3490659F, 0F);
	      RightClaw3 = new ModelRenderer(this, 18, 45);
	      RightClaw3.addBox(0F, 2.2F, 0.5F, 0, 1, 1);
	      RightClaw3.setRotationPoint(-1.2F, 20.8F, 4.5F);
	      RightClaw3.setTextureSize(128, 128);
	      RightClaw3.mirror = true;
	      setRotation(RightClaw3, 0F, 0F, 0F);
	      convertToChild(RightLeg, RightClaw3);
		  convertToChild(RightLeg, RightClaw2);
		  convertToChild(RightLeg, RightClaw1);
		  convertToChild(RightLeg, RightFoot3);
		  convertToChild(RightLeg, RightFoot2);
		  convertToChild(RightLeg, RightFoot1);
	}

	public void render(Entity entity, float f, float f1, float f2, float f3, float f4, float f5) {
		super.render(entity, f, f1, f2, f3, f4, f5);
		setRotationAngles(entity, f, f1, f2, f3, f4, f5);
		
        if (this.isChild) {
        	float scaling = 2.0F;
            GlStateManager.pushMatrix();
            GlStateManager.scale(1.0F / scaling, 1.0F / scaling, 1.0F / scaling);
            GlStateManager.translate(0.0F, 24.0F * f5, 0.0F);
    	    Head1.render(f5);
    	    UpperBoddy1.render(f5);
    	    LeftWing.render(f5);
    	    RightWing.render(f5);
    	    LeftLeg.render(f5);
    	    RightLeg.render(f5);
            GlStateManager.popMatrix();
        } else {
    	    Head1.render(f5);
    	    UpperBoddy1.render(f5);
    	    LeftWing.render(f5);
    	    RightWing.render(f5);
    	    LeftLeg.render(f5);
    	    RightLeg.render(f5);        	
        }

//	    RightEyelid.render(f5);
//	    LeftEyelid.render(f5);
	}

	private void setRotation(ModelRenderer model, float x, float y, float z) {
		model.rotateAngleX = x;
		model.rotateAngleY = y;
		model.rotateAngleZ = z;
	}

	public void setRotationAngles(Entity e, float f, float f1, float f2, float f3, float f4, float f5) {
		super.setRotationAngles(f, f1, f2, f3, f4, f5, e);

		Head1.rotateAngleX = f4 / (180F / (float)Math.PI);
        Head1.rotateAngleY = f4 / (180F / (float)Math.PI);

        LeftLeg.rotateAngleX = MathHelper.cos(f * 0.6662F) * 1.4F * f1;
        RightLeg.rotateAngleX = MathHelper.cos(f * 0.6662F + (float)Math.PI) * 1.4F * f1;

        LeftWing.rotateAngleZ = -f2;
        RightWing.rotateAngleZ = f2;
        
        // TODO: Blink eyes
	}
	
	// Use this for parts that have a common rotation point, so they can be rendered together with a single call to the render function
	protected void convertToChild(ModelRenderer parParent, ModelRenderer parChild) {
		// move child rotation point to be relative to parent
		parChild.rotationPointX -= parParent.rotationPointX;
		parChild.rotationPointY -= parParent.rotationPointY;
		parChild.rotationPointZ -= parParent.rotationPointZ;
		// make rotations relative to parent
		parChild.rotateAngleX -= parParent.rotateAngleX;
		parChild.rotateAngleY -= parParent.rotateAngleY;
		parChild.rotateAngleZ -= parParent.rotateAngleZ;
		// create relationship
		parParent.addChild(parChild);
	}
}
